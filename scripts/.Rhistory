print(POB)
POB <- POB %>%
select(DENSIDAD, TVIVIENDA, TP27_PERSO) %>% #Dejamos solo variables de interes
rename(mzn_densidad = DENSIDAD,
mzn_n_viv=TVIVIENDA,
mzn_n_hab=TP27_PERSO)
print(POB)
#localidades
localidad <- st_read("stores/localidades/Loca.shp")
#localidades
localidad <- st_read("..stores/localidades/Loca.shp")
#localidades
localidad <- st_read("..stores/localidades/Loca.shp")
#localidades
localidad <- st_read("..stores/localidades/Loca.shp")
#localidades
localidad <- st_read("..stores/lcalidad/Loca.shp")
#localidades
localidad <- st_read("..stores/localidad/Loca.shp")
localidad <- st_read("..stores/localidad/Loca.shp")
#localidades
localidad <- st_read("..stores/loca/Loca.shp")
#localidades
localidad <- st_read("..stores/localidad/localidad.shp")
#localidades
localidad <- st_read("..stores/localidad/localidad.shp")
#localidades
localidad <- st_read("../stores/localidad/localidad.shp")
st_crs(localidad)
localidad <- st_transform(localidad, crs =4686) #proyectar a coordenadas MAGNA-SIRGAS
st_crs(localidad)
print(localidad)
localidad <- localidad %>%
select(CODIGO_LOC,NOMBRE) %>%
rename(COD_LOC = CODIGO_LOC,
LOCALIDAD = NOMBRE)
print(localidad)
#union de informacion de establecimientos turismo
est_turismo  <- st_join(T_EGB,T_EAT, by = "COD_UPZ")
#union de informacion de establecimientos turismo
est_turismo  <- merge(T_EGB,T_EAT, by = "COD_UPZ")
#union de informacion de establecimientos turismo
est_turismo  <- left_join(T_EGB,T_EAT, by = "COD_UPZ")
#union de informacion de establecimientos turismo
est_turismo  <- st_join(T_EGB,T_EAT, join = st_intersects)
print(est_turismo)
st_equals(T_EGB,T_EAT)
VER <-st_equals(T_EGB,T_EAT)
View(VER)
# Crear dos objetos espaciales con geometrías iguales
poligono1 <- st_polygon(list(rbind(c(0, 0), c(1, 0), c(1, 1), c(0, 1), c(0, 0))))
poligono2 <- st_polygon(list(rbind(c(0, 0), c(1, 0), c(1, 1), c(0, 1), c(0, 0))))
# Verificar si los objetos espaciales son iguales
iguales <- st_equals(poligono1, poligono2)
print(iguales)
VER <-st_equals(T_EGB,T_EAT, sparse=TRUE)
View(VER)
st_equals(T_EGB,T_EAT, sparse=TRUE)
st_equals(T_EGB,T_EAT, sparse)
st_equals(T_EGB,T_EAT, sparse=FALSE)
st_equals(T_EGB,T_EAT, sparse=TRUE)
st_equals(T_EGB,T_EAT, sparse=TRUE)
st_equals(T_EGB,T_EAT)
st_equals_exact(T_EGB,T_EAT)
st_equals_exact(T_EGB,T_EAT)
st_equals_exact(T_EGB,T_EAT, par)
st_equals_exact(T_EGB,T_EAT, par, sparse = TRUE)
st_equals(T_EGB,T_EAT, sparse = TRUE)
#union de informacion de establecimientos turismo
est_turismo  <- st_join(T_EGB,T_EAT, join = st_equals)
print(est_turismo)
est_turismo <- est_turismo %>%
select(-COD_UPZ.y) %>%
rename(COD_UPZ = COD_UPZ.x)
print(est_turismo)
# union informacion de crimen
crimen <- st_join(incidentes,delitos, join = st_equals)
# union informacion de crimen
incidentes <- st_make_valid(incidentes)
delitos <- st_make_valid(delitos)
crimen <- st_join(incidentes,delitos, join = st_equals)
print(crimen)
crimen <- crimen %>%
select(-COD_SEC.y, -BARRIO.y) %>%
rename(COD_SEC = COD_SEC.x,
BARRIO = BARRIO.x)
print(crimen)
View(data)
#### nivel localidad ####
data <- st_join(data, localidad, join = st_within) # Realizar la unión espacial
print(data)
#espacio publico efectivo
epe <- st_read("../stores/epe_upz/EPE_UPZ.shp")
st_crs(epe)
epe <- st_transform(epe, crs = 4686) #proyectar a coordenadas MAGNA-SIRGAS
print(epe)
epe <- epe %>% select(EPE)
print(epe)
#### nivel upz ####
UPZ  <- st_join(est_turismo,epe, join = st_equals)
print(UPZ)
epe <- st_read("../stores/epe_upz/EPE_UPZ.shp")
st_crs(epe)
epe <- st_transform(epe, crs = 4686) #proyectar a coordenadas MAGNA-SIRGAS
print(epe)
#### nivel upz ####
data  <- st_join(data,est_turismo, join = st_within)
print(data)
st_crs(epe)
data <- st_join(data,epe, join = st_within)
print(data)
epe <- epe %>% select(EPE)
data <- rbind(train,test)
#indicamos la base como dato espacial
data <- st_as_sf(data, coords = c("lon", "lat"), crs = 4326) #crs: WGS 1984
data <- st_transform(data, crs = 4686) # crs: MAGNA-SIRGAS (referencia datos Bogota)
print(data)
#### nivel localidad ####
data <- st_join(data, localidad, join = st_within) # Realizar la unión espacial
#### nivel upz ####
data  <- st_join(data,est_turismo, join = st_within)
data <- st_join(data,epe, join = st_within)
print(data)
#### nivel barrio ####
data <- st_join(data,sector_catastral, join = st_within)
print(data)
#### nivel barrio ####
sector_catastral = st_make_valid(sector_catastral)
data <- st_join(data,sector_catastral, join = st_within)
print(data)
data <- st_join(data,crimen, join = st_within)
print(data)
data <- data %>%
select(-COD_SEC.y,-BARRIO.y) %>%
rename(COD_SEC = COD_SEC.x,
BARRIO = BARRIO.x)
print(data)
print(v_ref_mzn)
print(estratos)
nearest_indices <- st_nearest_feature(data, v_ref_mzn) # Obtener los índices de los polígonos más cercanos a cada punto en "data"
#### nivel manzana (asignamos el valor mas cercano)  ####
v_ref_mzn <- st_make_valid(v_ref_mzn)
nearest_i_vref <- st_nearest_feature(data, v_ref_mzn) # Obtener los índices de los polígonos más cercanos a cada punto en "data"
print(v_ref_mzn)
data <- data %>%
mutate(COD_MZN = v_ref_mzn$COD_MZN[nearest_i_vref],
V_REF_22 = v_ref_mzn$V_REF_22[nearest_i_vref])
print(data)
nearest_i_estratos <- st_nearest_feature(data, estratos)
estratos <- st_make_valid(estratos)
nearest_i_estratos <- st_nearest_feature(data, estratos)
print(estratos)
data <- data %>%
mutate(COD_MZN = v_ref_mzn$COD_MZN[nearest_i_vref],
V_REF_22 = v_ref_mzn$V_REF_22[nearest_i_vref],
ESTRATO = estratos$ESTRATO[nearest_i_estratos])
print(data)
nearest_i_POB <- st_nearest_feature(data, POB)
print(POB)
data <- data %>%
mutate(COD_MZN = v_ref_mzn$COD_MZN[nearest_i_vref],
V_REF_22 = v_ref_mzn$V_REF_22[nearest_i_vref],
ESTRATO = estratos$ESTRATO[nearest_i_estratos],
mzn_densidad = POB$mzn_densidad[nearest_i_POB],
mzn_n_viv = POB$mzn_n_viv[nearest_i_POB],
mzn_n_hab = POB$mzn_n_hab[nearest_i_POB])
print(data)
print(est_turismo)
print(zonas_turisticas)
#### nivel poligono (zitu)  ####
data2 <- st_join(data,zonas_turisticas, join = st_nearest_future, maxdist=100)
#### nivel poligono (zitu)  ####
data2 <- st_join(data,zonas_turisticas, join = st_nearest_feuture, maxdist=100)
#### nivel poligono (zitu)  ####
data2 <- st_join(data,zonas_turisticas, join = st_nearest_feature, maxdist=100)
print(data2)
View(data2)
#### nivel poligono (zitu)  ####
data3 <- st_join(data,zonas_turisticas, join = st_within)
print(data3)
View(data3)
View(data3)
zonas_turisticas_buffer <- st_buffer(zonas_turisticas, dist = 100)
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales"),
mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
#### nivel poligono (zitu)  ####
data <- st_join(data,zonas_turisticas_buffer, join = st_within)
print(data)
dist_colegios <- st_distance(data, colegios)
dist_colegios <- st_distance(data, colegios)
nearest_col = st_nearest_feature(data, colegios)
data <- data %>%
mutate(dist_colegios = st_distance(data,colegios[nearest_col], by_element = TRUE))
data <- data %>%
mutate(dist_colegios = st_distance(data, colegios[nearest_col], by_element = TRUE))
data$dist_colegios = st_distance(data, colegios[nearest_col], by_element = TRUE)
st_distance(data, colegios[nearest_col], by_element = TRUE)
st_distance(data,colegios)
print(datos_combinados)
View(datos_combinados)
#generar buffer para zonas turisticas
zonas_turisticas_buffer <- st_buffer(zonas_turisticas, dist = -100)
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales"),
mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales")
#mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
#generar buffer para zonas turisticas
zonas_turisticas_buffer <- st_buffer(zonas_turisticas, dist = 100)
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales"),
mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales")#,
#mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales"),
mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
ggplot() +
geom_sf(data = zonas_turisticas)
ggplot() +
geom_sf(data = zonas_turisticas_buffer)
#generar buffer para zonas turisticas
zonas_turisticas_buffer <- st_buffer(zonas_turisticas, dist = -100)
ggplot() +
geom_sf(data = zonas_turisticas_buffer)
#generar buffer para zonas turisticas
zonas_turisticas_buffer <- st_buffer(zonas_turisticas, dist = 100)
ggplot() +
geom_sf(data = zonas_turisticas_buffer)
ggplot() +
geom_sf(data = zonas_turisticas_buffer) +
geom_sf(data= zonas_turisticas)
ggplot() +
geom_sf(data = zonas_turisticas_buffer, color = "red") +
geom_sf(data= zonas_turisticas = color = "black")
ggplot() +
geom_sf(data = zonas_turisticas_buffer, color = "red") +
geom_sf(data= zonas_turisticas, color = "black")
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "Polígonos originales"),
mutate(zonas_turisticas_buffer, Categoria = "Polígonos con buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("Polígonos originales", "Polígonos con buffer"))
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("red", "blue"), labels = c("Polígonos originales", "Polígonos con buffer"))
##grafico para revisar el buffer
# Combinar los datos de las bases de polígonos
datos_combinados <- rbind(
mutate(zonas_turisticas, Categoria = "originales"),
mutate(zonas_turisticas_buffer, Categoria = "buffer")
)
# Crear el plano con los polígonos combinados y transparencia
ggplot() +
geom_sf(data = datos_combinados, aes(fill = Categoria), color = "black", alpha = 0.5) +
labs(title = "Polígonos originales y con buffer") +
scale_fill_manual(values = c("blue", "red"), labels = c("buffer", "original"))
nearest_col = st_nearest_feature(data, colegios)
st_distance(data, colegios[nearest_col])
st_distance(data,colegios)
st_distance(data,colegios)
nearest_col = st_nearest_feature(data, colegios)
distancias <-st_distance(data, colegios[nearest_col])
nearest_col <- st_nearest_feature(data, colegios)
distancias <-st_distance(data, colegios[nearest_col])
nearest_col <- colegios[nearest_col]
nearest_col <- st_nearest_feature(data, colegios)
nearest_col <- colegios[nearest_col]
# Encontrar el punto más cercano en "colegios" para cada punto en "data"
nearest_points <- st_nearest_feature(data, colegios)
# Obtener las geometrías correspondientes a los puntos más cercanos en "colegios"
nearest_geometries <- colegios[nearest_points]
# Crear una columna en "data" para almacenar las geometrías de los puntos más cercanos
data$nearest_geometry <- NA
# Recorrer cada punto en "data" y obtener la geometría del punto más cercano en "colegios"
for (i in 1:nrow(data)) {
nearest_point <- nearest_points[i]
nearest_geometry <- colegios[nearest_point, ]
data$nearest_geometry[i] <- st_geometry(nearest_geometry)
}
# Calcular la distancia entre cada punto en "data" y su punto más cercano en "colegios"
distancias <- st_distance(data, data$nearest_geometry)
dist_col <- st_distance(data, colegios)
data$dist_col <- apply(dist_col,1,min)
print(data)
summary(data$dist_col)
hist(data$dist_col)
#parques
dist_parq <- st_distance(data, parques)
#parques
parques <- st_make_valid(parques)
dist_parq <- st_distance(data, parques)
data$dist_parq <- apply(dist_parq,1,min)
print(data)
summary(data$dist_parq)
hist(data$dist_parq)
#Centros comerciales
dist_CC <- st_distance(data,dist_CC)
#Centros comerciales
dist_CC <- st_distance(data,dist_CC)
#Centros comerciales
dist_CC <- st_distance(data,CC)
print(CC)
#Centros comerciales
CC <- st_make_valid(CC)
dist_CC <- st_distance(data,CC)
#estaciones TM
dist_TM <- st_distance(data, TM)
#Centros comerciales
CC <- st_read("../stores/Grandes_centros_comerciales/Grandes_centros_comerciales.shp")
st_crs(CC)
CC <- st_transform(CC, crs = 4686) #proyectar a coordenadas MAGNA-SIRGAS
print(CC)
dist_CC <- st_distance(data,CC)
data$dist_CC <- apply(dist_CC,1,min)
summary(data$dist_CC)
hist(data$dist_CC)
data$dist_TM <- apply(dist_TM,1,min)
print(data)
summary(data$dist_TM)
hist(data$dist_TM)
##### BASE CONSOLIDADA ####
print(data)
names(data)
data
View(data)
View(data)
data <- data %>%
select(property_id,price, sample, year, month, surface_total, surface_covered,
rooms, bedrooms, bathrooms, property_type, operation_type, title, description,
COD_LOC, COD_UPZ, COD_SEC, COD_MZN, LOCALIDAD, UPZ, BARRIO, V_REF_22,
ESTRATO, mzn_densidad, mzn_n_viv, mzn_n_hab, EPE, dist_parq, dist_TM,
dist_col, dist_CC, tipologia_ZIT, tegb, teat, i_riñas, i_narcoticos,
i_orden, i_maltrato, d_homicidios, d_lesiones, d_hurto_personas,
d_hurto_residencias, d_hurto_comercio, d_hurto_autos, d_hurto_motos,
d_hurto_bici, d_hurto_cel, d_sexual, d_violencia)
##### BASE CONSOLIDADA ####
print(data)
View(data)
##exportamos dataset consolidado
st_write(data, "../stores/data.geojson", driver = "GeoJSON")
View(data)
############################################################################
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
#Definir el directorio
path_script<-rstudioapi::getActiveDocumentContext()$path
path_folder<-dirname(path_script)
setwd(path_folder)
getwd()
#packages
require("pacman")
p_load("tidyverse", #data wrangling
"vtable", #descriptive stats package
"stargazer", #tidy regression results,
"sf", #handling spatial data
"spatialsample", #spatial CV
"leaflet", #visualizacion open street maps
"tmaptools") #conexion a open street maps
data <- st_read("../stores/data.geojson")
st_write(data, "../stores/data.shp")
head(data)
View(data)
############################# problem set 1 #################################
# Autor: Sergio Jimenez
# SI ENCUENTRA ALGUN ERROR O SUGERENCIA POR FAVOR CONTACTEME
# correo: sa.jimenezo1@uniandes.edu.co
# fecha: 05/07/2023
############################################################################
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
#Definir el directorio
path_script<-rstudioapi::getActiveDocumentContext()$path
path_folder<-dirname(path_script)
setwd(path_folder)
rm(list = ls()) # Limpiar Rstudio
rm(list = ls()) # Limpiar Rstudio
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
#Definir el directorio
path_script<-rstudioapi::getActiveDocumentContext()$path
path_folder<-dirname(path_script)
setwd(path_folder)
#Definir el directorio
path_script<-rstudioapi::getActiveDocumentContext()$path
path_folder<-dirname(path_script)
setwd(path_folder)
getwd()
#packages
require("pacman")
p_load("tidyverse", #data wrangling
"vtable", #descriptive stats package
"stargazer", #tidy regression results,
"sf", #handling spatial data
"spatialsample", #spatial CV
"leaflet", #visualizacion open street maps
"tmaptools") #conexion a open street maps
data <- st_read("../stores/data.geojson")
View(data)
p_load("tidyverse", #data wrangling
"vtable", #descriptive stats package
"stargazer", #tidy regression results,
"sf", #handling spatial data
"spdep",
"lmtest",
"spatialsample", #spatial CV
"leaflet", #visualizacion open street maps
"tmaptools") #conexion a open street maps
table(data$sample)
#separacion train y test
train <- data[data$sample == "train", ]
test <- data[data$sample == "test", ]
#clusters
barrio <-poly2nb(train,queen = TRUE)
#clusters
barrio <-poly2nb(train,queen = TRUE)
train <- data[data$sample == "train", ]
test <- data[data$sample == "test", ]
names(data)
#vector de controles
x_train <- train[c("year", "surface_total", "rooms", "bathrooms", "property_type",
"operation_type", "V_REF_22", "ESTRATO", "mzn_densidad", "EPE", "dist_parq",
"dist_col", "dist_TM", "dist_CC")]
#regresion
formula <- as.formula("price ~ x")
#regresion
model <- lm(formula, data=train)
#regresion
formula <- as.formula("price ~ x_train")
#regresion
model <- lm(formula, data=train)
#regresion
formula <- as.formula("price ~ x_train")
#regresion
model <- lm(formula, data=train)
# Separación de datos de entrenamiento y prueba
train <- data[data$sample == "train", ]
test <- data[data$sample == "test", ]
# Vector de variables de control para el conjunto de entrenamiento
x_train <- train[, c("year", "surface_total", "rooms", "bathrooms", "property_type",
"operation_type", "V_REF_22", "ESTRATO", "mzn_densidad", "EPE",
"dist_parq", "dist_col", "dist_TM", "dist_CC", "COD_SEC")]
# Variable dependiente para el conjunto de entrenamiento
y_train <- train$price
# Fórmula de regresión
formula <- as.formula("price ~ .")
# Regresión OLS en el conjunto de entrenamiento
model <- lm(formula, data = train)
# Eliminar la variable 'geometry' de los datos
train <- train[, !(names(train) %in% c("geometry"))]
# Fórmula de regresión
formula <- as.formula("price ~ .")
# Regresión OLS en el conjunto de entrenamiento
model <- lm(formula, data = train)
