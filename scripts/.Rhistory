"formal_informal", "parentesco_jhogar", "salario_promedio_hogar")] # variable salario_real_hora_imputado
GEIH[c(9409),
c("salario_real_hora_imputado", "edad", "educacion_alcanzada",
"educacion_tiempo", "mujer", "emprendedor", "ocupacion",
"formal_informal", "parentesco_jhogar", "salario_promedio_hogar")] # variable edad
GEIH[c(20957, 21792),
c("salario_real_hora_imputado", "edad", "educacion_alcanzada",
"educacion_tiempo", "mujer", "emprendedor", "ocupacion",
"formal_informal", "parentesco_jhogar", "salario_promedio_hogar")] # variable educacion_tiempo
# Elimino los datos incoherentes
GEIH <- GEIH[-c(9409, 20957, 21792), , drop = FALSE]
# Elimino variables con NA en la variable de interés salario_real_hora_imputado
GEIH <- GEIH[complete.cases(GEIH$salario_real_hora_imputado), , drop = FALSE]
# Exporto la base limpia
write.xlsx(GEIH, "GEIH")
# 3) Evalúo las estadísticas descriptivas de las variables de interés #########
rm(list = ls()) # Limpiar Rstudio
# Cargo la base limpia
GEIH <- read_excel("GEIH") # Si no quiere correr todo el código, pueden correr esta línea y les importa la base límpia
names(GEIH)
# Creo los estadísticos descriptivos de las principales variables de interés
var_interes <- GEIH [, c("salario_real_hora_imputado", "log_salario_hora_imputado", "edad", "edad2", "mujer",
"educacion_alcanzada", "educacion_tiempo",
"emprendedor", "ocupacion", "formal_informal",
"parentesco_jhogar", "salario_promedio_hogar",
"relacion_laboral", "tamaño_empresa")]
descriptivos <- var_interes [, c("salario_real_hora_imputado", "edad",
"educacion_tiempo", "mujer", "emprendedor",
"formal_informal", "parentesco_jhogar")]
# Evalúo los descriptivos de las variables de interés en una tabla para exportar
tabla_estadisticas <- tibble()  # Creo una tibble vacía para almacenar los resultados
for (variable in colnames(descriptivos)) {
estadisticas <- descriptivos %>%
summarise(n_observaciones = sum(!is.na(.data[[variable]])),
promedio = mean(.data[[variable]], na.rm = TRUE),
sd = sd(.data[[variable]], na.rm = TRUE),
mín = min(.data[[variable]], na.rm = TRUE),
max = max(.data[[variable]], na.rm = TRUE)) %>%
add_column(variable = variable, .before = 1)
tabla_estadisticas <- bind_rows(tabla_estadisticas, estadisticas)  # Agregar las estadísticas a la tabla
}
tabla_estadisticas
# Crear la tabla en formato APA
tabla_01 <- flextable(tabla_estadisticas)
tabla_01 <- theme_booktabs(tabla_01)
tabla_01 <- autofit(tabla_01)
tabla_01
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
# Crear gráfica de frecuencias para la edad
hist(GEIH$edad,
breaks = 50,
main = "Frecuencias de edad",
xlab = "años", ylab = "Frecuencia") #creo el histograma
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
# Establecer el diseño de la ventana de gráficos
par(mfrow = c(1, 3))  # Ajusta los valores de "filas" y "columnas" según tus necesidades
par(mfrow = c(1, 3))
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
par(mfrow = c(1, 2))
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Log de Salario por hora", ylab = "Frecuencia") #creo el histograma
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Log de Salario por hora", ylab = "Frecuencia") #creo el histograma
par(mfrow = c(1, 2))
# Crear gráfica de frecuencias para el salario
filtro_salario <- GEIH$salario_real_hora_imputado[
GEIH$salario_real_hora_imputado <= mean(GEIH$salario_real_hora_imputado) +
3 * sd(GEIH$salario_real_hora_imputado)] # omito valores superiores a 3 ds para facilitar la visualización gráfica
hist(filtro_salario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Salario por hora", ylab = "Frecuencia") #creo el histograma
filtro_logsalario <- GEIH$log_salario_hora_imputado[
GEIH$log_salario_hora_imputado <= mean(GEIH$log_salario_hora_imputado) +
3 * sd(GEIH$log_salario_hora_imputado)] # omito valores superiores a 4 ds para facilitar la visualización gráfica
hist(filtro_logsalario,
breaks = 50,
main = "Frecuencias de salario por hora",
xlab = "Log de Salario por hora", ylab = "Frecuencia") #creo el histograma
# 1) Organizo el directorio y descargo los paquetes requeridos #################
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
require(pacman)
# Cargo varios paquetes al tiempo
p_load(ggplot2, rio, tidyverse, skimr, caret, rvest, magrittr, openxlsx,
rstudioapi, readxl, openxlsx, stargazer, broom, knitr, htmlTable)
#Cargo base preliminar de trabajo
GEIH <- read_excel("../stores/GEIH")
GEIH$estrato <- factor(GEIH$estrato)
GEIH$relacion_laboral <- factor(GEIH$relacion_laboral)
GEIH$tama?o_empresa <- factor(GEIH$tama?o_empresa)
GEIH$estrato <- factor(GEIH$estrato)
GEIH$relacion_laboral <- factor(GEIH$relacion_laboral)
GEIH$tama?o_empresa <- factor(GEIH$tama?o_empresa)
GEIH$tamaño_empresa <- factor(GEIH$tamaño_empresa)
GEIH <- GEIH %>%
filter(!is.na(relacion_laboral)) %>%
mutate(educacion_tiempo2 = educacion_tiempo^2,
edad3 = edad^3)%>%
rename(mujer=sexo)
#ESTADISTICAS DESCRIPTIVAS
stargazer(data.frame(GEIH), header=FALSE, type='text',title="Variables en el Data Set")
#generaci?n de grupo train - test
#Definimos semilla para hacerlo reproducible
set.seed(777)
#usar 70% del dataset como entrenamiento y 30% como test
sample <- sample(c(TRUE, FALSE), nrow(GEIH), replace=TRUE, prob=c(0.7,0.3))
head(sample)
train  <- GEIH[sample, ]
test   <- GEIH[!sample, ]
# Se verifican las dimensiones de cada dataframe
dim(train)
dim(test)
# especificaci?n 1: salario ~ edad + edad2
model1<-lm(log_salario_hora_imputado~edad + edad2,data=train)
summary(model1)
test$model1<-predict(model1,newdata = test)
MSE_model1<-with(test,mean((log_salario_hora_imputado-model1)^2))
MSE_model1
# especificaci?n 2: salario ~ mujer
model2<-lm(log_salario_hora_imputado~mujer,data=train)
summary(model2)
test$model2<-predict(model2,newdata = test)
MSE_model2<-with(test,mean((log_salario_hora_imputado-model2)^2))
MSE_model2
model3<-lm(log_salario_hora_imputado ~ edad + edad2 + educacion_tiempo + tama?o_empresa,data=train)
model3<-lm(log_salario_hora_imputado ~ edad + edad2 + educacion_tiempo + tama?o_empresa,data=train)
model3<-lm(log_salario_hora_imputado ~ edad + edad2 + educacion_tiempo + tamaño_empresa,data=train)
summary(model3)
test$model3<-predict(model3,newdata = test)
MSE_model3<-with(test,mean((log_salario_hora_imputado-model3)^2))
MSE_model3
# especificaci?n 4: salario ~ mujer + edad + edad2 + educacion_tiempo + (interaccion entre edad y genero)
model4<-lm(log_salario_hora_imputado ~ mujer + edad + edad2 + educacion_tiempo + mujer * edad,data=train)
summary(model4)
test$model4<-predict(model4,newdata = test)
MSE_model4<-with(test,mean((log_salario_hora_imputado-model4)^2))
MSE_model4
# especificacion 5: salario ~ mujer + edad + edad2 + educacion_tiempo  + estrato + (Interacci?n entre edad y g?nero)
model5<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + educacion_tiempo  + estrato + edad * mujer,data=train)
summary(model5)
test$model5<-predict(model5,newdata = test)
MSE_model5<-with(test,mean((log_salario_hora_imputado-model5)^2))
MSE_model5
# especificacion 6: salario ~ mujer + edad + edad2 + educacion_tiempo + educacion_tiempo2 + estrato + (Interaccion entre edad y genero)
model6<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + educacion_tiempo + educacion_tiempo2 + estrato + edad * mujer,data=train)
summary(model6)
test$model6<-predict(model6,newdata = test)
MSE_model6<-with(test,mean((log_salario_hora_imputado-model6)^2))
MSE_model6
# especificacion 7: salario ~ mujer + edad + edad2 + edad3 + educacion_tiempo + educacion_tiempo2 + estrato + (Interacci?n entre edad y genero)
model7<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + edad3 + educacion_tiempo + educacion_tiempo2 + estrato + edad * mujer,data=train)
summary(model7)
test$model7<-predict(model7,newdata = test)
MSE_model7<-with(test,mean((log_salario_hora_imputado-model7)^2))
MSE_model7
#Se presentan las estimaciones de todos los modelos
stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
modelos5
# Crear la tabla en formato APA
tabla_02 <- flextable(modelos5)
# Crear la tabla en formato APA
p_load(flextable)
tabla_02 <- flextable(modelos5)
as.data.frame(modelos5)
# Crear la tabla en formato APA
tabla_02 <- flextable(modelos5)
# Crear la tabla en formato APA
tabla_02 <- flextable(as.data.frame(modelos5))
tabla_02 <- theme_booktabs(tabla_01)
# Crear la tabla en formato APA
tabla_051 <- flextable(as.data.frame(modelos5))
tabla_051 <- theme_booktabs(tabla_51)
tabla_051 <- theme_booktabs(tabla_051)
tabla_051 <- autofit(tabla_051)
tabla_051
# Crear la tabla en formato APA
tabla_051 <- flextable(as.data.frame(modelos5))
tabla_051
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
modelos5
# Crear la tabla en formato APA
tabla_051 <- flextable(as.data.frame(modelos5))
tabla_051
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
# Crear la tabla en formato APA
tabla_05 <- flextable(as.data.frame(modelos5))
tabla_05
tabla_05
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
modelos5
# Crear la tabla en formato APA
tabla_051 <- theme_booktabs(tabla_051)
tabla_051 <- autofit(tabla_051)
tabla_051
#Se presentan las estimaciones de todos los modelos
modelos5 <- stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
# Crear la tabla en formato APA
tabla_051 <- autofit(modelos5)
p_load(knitr, webshot)
getwd
getwd()
# Ruta y nombre del archivo HTML
output_file <- "C:/Users/PORTATIL/OneDrive - Universidad de los Andes/Big Data/Repositorios/PS_Repo/scripts/views/modelos_predictivos.html"
# Generar el archivo HTML con la tabla
writeLines(modelos5, con = output_file)
# Ruta y nombre del archivo HTML
output_file <- "C:/Users/PORTATIL/OneDrive - Universidad de los Andes/Big Data/Repositorios/PS_Repo/views/modelos_predictivos.html"
# Generar el archivo HTML con la tabla
writeLines(modelos5, con = output_file)
# Convertir el archivo HTML a una imagen
webshot(output_file, "imagen_modelos.png")
# Convertir el archivo HTML a una imagen
webshot(output_file, "imagen_modelos.png")
# Ruta y nombre del archivo HTML
output_file <- "C:/Users/PORTATIL/OneDrive - Universidad de los Andes/Big Data/Repositorios/PS_Repo/views/modelos_predictivos.png"
ruta_html <- "C:/Users/PORTATIL/OneDrive - Universidad de los Andes/Big Data/Repositorios/PS_Repo/views/modelos_predictivos.html"
ruta_imagen <- "C:/Users/PORTATIL/OneDrive - Universidad de los Andes/Big Data/Repositorios/PS_Repo/views/modelos_predictivos.html"
save_html(modelos5, file = ruta_html)
p_load(htmltools)
save_html(modelos5, file = ruta_html)
modelo_texto <- as.character(modelos5)
# Guardar el texto como archivo HTML
htmltools::save_html(modelo_texto, file = ruta_html)
# Guardar el texto como archivo HTML
writeLines(modelo_texto, con = ruta_html)
# Capturar una captura de pantalla del archivo HTML y guardarla como imagen
webshot::webshot(ruta_html, file = ruta_imagen)
# 1) Organizo el directorio y descargo los paquetes requeridos #################
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
require(pacman)
# Cargo varios paquetes al tiempo
p_load(ggplot2, rio, tidyverse, skimr, caret, rvest, magrittr, openxlsx,
rstudioapi, readxl, openxlsx, stargazer, broom, knitr, htmlTable)
#Cargo base preliminar de trabajo
GEIH <- read_excel("../stores/GEIH")
GEIH$estrato <- factor(GEIH$estrato)
GEIH$relacion_laboral <- factor(GEIH$relacion_laboral)
GEIH$tamaño_empresa <- factor(GEIH$tamaño_empresa)
GEIH <- GEIH %>%
filter(!is.na(relacion_laboral)) %>%
mutate(educacion_tiempo2 = educacion_tiempo^2,
edad3 = edad^3)%>%
rename(mujer=sexo)
#ESTADISTICAS DESCRIPTIVAS
stargazer(data.frame(GEIH), header=FALSE, type='text',title="Variables en el Data Set")
#generaci?n de grupo train - test
#Definimos semilla para hacerlo reproducible
set.seed(777)
#usar 70% del dataset como entrenamiento y 30% como test
sample <- sample(c(TRUE, FALSE), nrow(GEIH), replace=TRUE, prob=c(0.7,0.3))
head(sample)
train  <- GEIH[sample, ]
test   <- GEIH[!sample, ]
# Se verifican las dimensiones de cada dataframe
dim(train)
dim(test)
# especificaci?n 1: salario ~ edad + edad2
model1<-lm(log_salario_hora_imputado~edad + edad2,data=train)
summary(model1)
test$model1<-predict(model1,newdata = test)
MSE_model1<-with(test,mean((log_salario_hora_imputado-model1)^2))
MSE_model1
# especificaci?n 2: salario ~ mujer
model2<-lm(log_salario_hora_imputado~mujer,data=train)
summary(model2)
test$model2<-predict(model2,newdata = test)
MSE_model2<-with(test,mean((log_salario_hora_imputado-model2)^2))
MSE_model2
model3<-lm(log_salario_hora_imputado ~ edad + edad2 + educacion_tiempo + tamaño_empresa,data=train)
summary(model3)
test$model3<-predict(model3,newdata = test)
MSE_model3<-with(test,mean((log_salario_hora_imputado-model3)^2))
MSE_model3
# especificaci?n 4: salario ~ mujer + edad + edad2 + educacion_tiempo + (interaccion entre edad y genero)
model4<-lm(log_salario_hora_imputado ~ mujer + edad + edad2 + educacion_tiempo + mujer * edad,data=train)
summary(model4)
test$model4<-predict(model4,newdata = test)
MSE_model4<-with(test,mean((log_salario_hora_imputado-model4)^2))
MSE_model4
# especificacion 5: salario ~ mujer + edad + edad2 + educacion_tiempo  + estrato + (Interacci?n entre edad y g?nero)
model5<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + educacion_tiempo  + estrato + edad * mujer,data=train)
summary(model5)
test$model5<-predict(model5,newdata = test)
MSE_model5<-with(test,mean((log_salario_hora_imputado-model5)^2))
MSE_model5
# especificacion 6: salario ~ mujer + edad + edad2 + educacion_tiempo + educacion_tiempo2 + estrato + (Interaccion entre edad y genero)
model6<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + educacion_tiempo + educacion_tiempo2 + estrato + edad * mujer,data=train)
summary(model6)
test$model6<-predict(model6,newdata = test)
MSE_model6<-with(test,mean((log_salario_hora_imputado-model6)^2))
MSE_model6
# especificacion 7: salario ~ mujer + edad + edad2 + edad3 + educacion_tiempo + educacion_tiempo2 + estrato + (Interacci?n entre edad y genero)
model7<-lm(log_salario_hora_imputado~ mujer + edad + edad2 + edad3 + educacion_tiempo + educacion_tiempo2 + estrato + edad * mujer,data=train)
summary(model7)
test$model7<-predict(model7,newdata = test)
MSE_model7<-with(test,mean((log_salario_hora_imputado-model7)^2))
MSE_model7
#Se presentan las estimaciones de todos los modelos
stargazer(model1, model2, model3, model4, model5, model6, model7,
title = "Modelos predictivos",
summary = TRUE,
type = "text",
out = "../views/modelos_predictivos.html",
omit.stat = c("f", "ser"),
omit = c("Constant", "R^2", "Adj. R^2"),
notes = c("Errores est?ndar en par?ntesis")
)
#Los resultados de la predicci?n (MSE) de los modelos para los modelos previos y nuevos se condensan a continuaci?n:
MSE_table<-c(MSE_model1, MSE_model2, MSE_model3, MSE_model4, MSE_model5,MSE_model6,MSE_model7)
x_label<-c('Modelo 1','Modelo 2', 'Modelo 3', 'Modelo 4', 'Modelo 5','Modelo 6','Modelo 7')
MSEtabla<-data.frame(Columna1 = x_label,Columna2 = MSE_table)
dataframe <- data.frame(Columna1 = MSEtabla$Columna1, Columna2 = MSEtabla$Columna2)
colnames(dataframe) <- c("Modelo", "MSE")
print(dataframe)
stargazer(prediccion_errores, summary = FALSE, title= "Tabla 5.2 Errores de prediccion", type = "text", out= "../views/errores de prediccion.html")
#Los resultados de la predicci?n (MSE) de los modelos para los modelos previos y nuevos se condensan a continuaci?n:
MSE_table<-c(MSE_model1, MSE_model2, MSE_model3, MSE_model4, MSE_model5,MSE_model6,MSE_model7)
x_label<-c('Modelo 1','Modelo 2', 'Modelo 3', 'Modelo 4', 'Modelo 5','Modelo 6','Modelo 7')
MSEtabla<-data.frame(Columna1 = x_label,Columna2 = MSE_table)
dataframe <- data.frame(Columna1 = MSEtabla$Columna1, Columna2 = MSEtabla$Columna2)
colnames(dataframe) <- c("Modelo", "MSE")
print(dataframe)
stargazer(prediccion_errores, summary = FALSE, title= "Tabla 5.2 Errores de prediccion", type = "text", out= "../views/errores de prediccion.html")
stargazer(MSE_table, summary = FALSE, title= "Tabla 5.2 Errores de prediccion", type = "text", out= "../views/errores de prediccion.html")
stargazer(MSEtabla, summary = FALSE, title= "Tabla 5.2 Errores de prediccion", type = "text", out= "../views/errores de prediccion.html")
#Ahora se grafican los MSE de cada uno de los modelos predichos para poder compararlos
MSEmodelos<-ggplot(data=MSEtabla, aes(x = x_label, y = MSE_table, group=1)) +
geom_line() +
geom_point() +
ggtitle("MSE de los modelos especificados") +
ylab("MSE") +
xlab ("N?mero de modelo")
MSEmodelos
# Guardamos el gr?fico en formato JPG
ggsave(filename = "../views/MSE de los modelos especificados.jpg", plot = MSEmodelos)
#Ahora se grafican los MSE de cada uno de los modelos predichos para poder compararlos
MSEmodelos<-ggplot(data=MSEtabla, aes(x = x_label, y = MSE_table, group=1)) +
geom_line() +
geom_point() +
ggtitle("MSE de los modelos especificados") +
ylab("MSE") +
xlab ("Número de modelo")
MSEmodelos
# Guardamos el gr?fico en formato JPG
ggsave(filename = "../views/MSE de los modelos especificados.jpg", plot = MSEmodelos)
#Posteriormente, para tener idea de cuales modelos tienen el MSE mas bajo
ordenMSE <- prediccion_errores[order(prediccion_errores$MSE), ]
#Posteriormente, para tener idea de cuales modelos tienen el MSE mas bajo
ordenMSE <- MSEtabla[order(MSEtabla$MSE), ]
#Posteriormente, para tener idea de cuales modelos tienen el MSE mas bajo
ordenMSE <- MSEtabla[order(MSEtabla), ]
#Posteriormente, para tener idea de cuales modelos tienen el MSE mas bajo
ordenMSE <- MSE_table[order(MSE_table$MSE), ]
#Posteriormente, para tener idea de cuales modelos tienen el MSE mas bajo
ordenMSE <- MSE_table[order(MSE_table), ]
#Los resultados de la predicción (MSE) de los modelos para los modelos previos y nuevos se condensan a continuación:
MSE_table<-c(MSE_model1, MSE_model2, MSE_model3, MSE_model4, MSE_model5,MSE_model6,MSE_model7)
x_label<-c('Modelo 1','Modelo 2', 'Modelo 3', 'Modelo 4', 'Modelo 5','Modelo 6','Modelo 7')
MSEtabla<-data.frame(Columna1 = x_label,Columna2 = MSE_table)
MSEtabla<-data.frame(Columna1 = x_label,Columna2 = MSE_table)
rm(list = ls()) # Limpiar Rstudio
options(scipen = 20,  digits=3) # establezco la notacion científica y el número de decimales
require(pacman)
p_load(ggplot2, rio, tidyverse, skimr, caret, rvest, magrittr, openxlsx,
rstudioapi, readxl, openxlsx, stargazer, boot, car, flextable) # Cargo los paquetes de interés para ejecutar el código
# Determino el directorio de trabajo
escritorio <- rstudioapi::getActiveDocumentContext()$path #accedo a la ruta del archivo
carpeta <- dirname(escritorio) # extraigo el nombre de la carpeta donde está guardado el archivo
setwd(carpeta) # Establezco el directorio de trabajo como aquel donde está guardado el archivo
getwd() # verifico el directorio
rm(carpeta, escritorio) # Limpio el ambiente
# Cargo la base
base_geih2018 <- read_excel("../stores/Base_unida")
# Cargo la base limpia
GEIH <- read_excel("../stores/GEIH") # Si no quiere correr todo el código, pueden correr esta línea y les importa la base límpia
